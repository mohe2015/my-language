(set 0 (define-primitive))
(set 1 (define-primitive))
(set bit (define-type (or 0 1)))
(set add-bit-with-carry (define-function ((carry-out bit) (result bit)) ((carry-in bit) (a bit) (b bit))
        (if (= a 0)
            (if (= b 0)
                (if (= carry-in 0)
                    (0 0)
                    (0 1)
                (if (= carry-in 0)
                    (0 1)
                    (1 0)))
            (if (= b 0)
                (if (= carry-in 0)
                    (0 1)
                    (1 0))
                (if (= carry-in 0)
                    (1 0)
                    (1 1)))))))
(set byte (define-type (and bit bit bit bit bit bit bit bit)))
(set add-byte (define-function ((result byte) (carry bit)) ((a byte) (b byte))
    (define-function ((carry-out-0 bit) (result bit-0))
        (let ((carry-out-1 bit-1) (add-bit-with-carry carry-out-0 (nth a 1) (nth b 1)))
            (let ((carry-out-2 bit-2) (add-bit-with-carry carry-out-1 (nth a 2) (nth b 2)))
                (let ((carry-out-3 bit-3) (add-bit-with-carry carry-out-2 (nth a 3) (nth b 3)))
                    (let ((carry-out-4 bit-4) (add-bit-with-carry carry-out-3 (nth a 4) (nth b 4)))
                        (let ((carry-out-5 bit-5) (add-bit-with-carry carry-out-4 (nth a 5) (nth b 5)))
                            (let ((carry-out-6 bit-6) (add-bit-with-carry carry-out-5 (nth a 6) (nth b 6)))
                                (let ((carry-out-7 bit-7) (add-bit-with-carry carry-out-6 (nth a 7) (nth b 7)))
                                    (byte bit-0 bit-1 bit-2 bit-3 bit-4 bit-5 bit-6 bit-7)))))))))
        (add-bit-with-carry 0 (nth a 0) (nth b 0))))
(set int4 (define-type (and byte byte byte byte)))
(set test1 (bit 0))
(set test2 (bit 1))
(set test3 (byte (bit 0) (bit 0) (bit 0) (bit 0) (bit 0) (bit 0) (bit 0) (bit 1)))
(set result (add (byte 0 0 0 0 0 0 0 1) (byte 0 0 0 0 0 0 0 1)))